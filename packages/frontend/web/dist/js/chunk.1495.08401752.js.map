{"version":3,"file":"js/chunk.1495.08401752.js","mappings":"wPASWA,EAAU,UCId,IAAMC,EAAmB,CAAC,CAC/BC,eAAAA,CAAc,CACdC,UAAAA,CAAS,CAIV,IACC,GAAM,CAAEC,iBAAAA,CAAgB,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,IACvB,CAAEC,YAAAA,CAAW,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IAElBC,EAAoBC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,IAAMH,IAAe,CAACA,EAAY,EAExE,MACE,WAACI,MAAAA,CAAIC,UDnBW,U,UCoBd,UAACC,EAAAA,SAASA,CAAAA,CAACD,UDnBC,UCmBuBE,QAASL,C,GAC5C,WAACE,MAAAA,CAAIC,UDVQ,U,UCWX,UAACG,OAAAA,C,SAAK,2D,GACN,UAACC,EAAAA,iBAAiBA,CAAAA,CAAAA,G,GAEpB,UAACL,MAAAA,C,SACC,UAACM,EAAAA,EAAMA,CAAAA,CACLC,QAAQ,UACRC,SAAUhB,IAAAA,EAAeiB,MAAM,CAC/BN,QAAS,KACPT,EAAiB,CACfgB,MAAO,gCACPC,YACE,uDACFC,YAAa,OACbC,qBAAsB,CACpBN,QAAS,SACX,EACAd,UAAWA,EACXqB,SACEtB,EAAeiB,MAAM,CAAG,EACtB,WAACM,MAAAA,CAAId,UD5CI,U,UC6CP,UAACe,IAAAA,C,SAAG,G,GACHxB,EAAeyB,GAAG,CAAC,CAAC,CAAEC,GAAAA,CAAE,CAAEC,aAAAA,CAAY,CAAEC,SAAAA,CAAQ,CAAE,GACjD,WAACJ,IAAAA,C,UACE,KAAK,IAAEE,EAAG,IAAE,IACb,UAACd,OAAAA,CAAKH,UD/CJ,U,SCgDCoB,KAAKC,SAAS,CAACH,E,GAElB,UAACf,OAAAA,CAAKH,UD9CR,U,SC+CKoB,KAAKC,SAAS,CAACF,E,GACX,I,EAPDF,IAWV,UAACF,IAAAA,C,SAAG,G,MAGN,qBAEN,EACF,E,SACD,M,OAMT,E,eCrEO,IAAMO,EAAkB,CAAC,CAC9BC,MAAAA,CAAK,CACLC,YAAAA,EAAc,EAAK,CACnBf,MAAAA,CAAK,CACLgB,cAAAA,CAAa,CACbC,aAAAA,CAAY,CAOb,IACC,GAAM,CAACC,EAAMC,EAAQ,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAASL,GAE3BM,EAAchC,CAAAA,EAAAA,EAAAA,WAAAA,EAClB,CAACmB,EAAYc,KACXA,GAAOC,iBACP,IAAMC,EAAgBC,SAASC,cAAc,CAAClB,GAC1CgB,GACFA,EAAcG,cAAc,CAAC,CAC3BC,SAAU,SACVC,MAAO,QACT,GAEFZ,IAAejB,EACjB,EACA,CAACiB,EAAcjB,EAAM,EAGvB,MACE,WAAC8B,EAAAA,EAAgB,EACfvC,UF3Be,UE4Bf2B,KAAMA,EACNa,aAAcZ,E,UAEd,WAAC7B,MAAAA,CACCC,UF9BmB,UE+BnByC,cAAahC,IAAUgB,E,UAEvB,UAACc,EAAAA,EAAmB,EAACvC,UF3CN,UE2CmC0C,YAAWf,E,SAC3D,UAACgB,EAAAA,kBAAkBA,CAAAA,CAAAA,E,GAErB,UAACC,IAAAA,CACC5C,UAAW6C,EACXC,KAAM,CAAC,CAAC,EAAErC,EAAM,CAAC,CACjBP,QAAS6C,GAAKjB,EAAYrB,EAAOsC,G,SAEhCtC,C,MAIL,UAACV,MAAAA,CAAIC,UFrDuB,U,SEsDzBuB,EAAMP,GAAG,CAAC,CAACgC,EAAMC,IAChB,UAACV,EAAAA,EAAmB,EAClBvC,UFjDgB,UEmDhBE,QAAS,IAAM4B,EAAYkB,G,SAE3B,UAACJ,IAAAA,CAAE5C,UAAW6C,EAAgBC,KAAM,CAAC,CAAC,EAAEE,EAAK,CAAC,C,SAC3CA,C,IAJEC,G,KAWjB,ECrEaC,EAAoB,CAAC,CAChCjC,GAAAA,CAAE,CACFP,YAAAA,CAAW,CACXyC,gBAAAA,CAAe,CACfC,UAAAA,CAAS,CACTvC,SAAAA,CAAQ,CAOT,IACC,IAAMwC,EAAa,IAAIC,KAAKH,GAAiBI,cAAc,GAC3D,MACE,WAACxD,MAAAA,CAAIkB,GAAIA,EAAIjB,UHLQ,U,UGMnB,WAACD,MAAAA,CAAIC,UHnBW,U,UGoBd,UAACD,MAAAA,CAAIC,UHJiB,U,SGIoBU,C,GAC1C,UAACX,MAAAA,C,SACC,UAACyD,OAAAA,CAAKxD,UHPW,U,SGOuBiB,C,KAE1C,WAAClB,MAAAA,CAAIC,UHVuB,U,UGUmB,oBAC3BqD,E,MAGtB,WAACtD,MAAAA,CAAIC,UH3BY,U,UG4BdoD,EACAvC,E,KAIT,E,eC/BO,IAAM4C,EAA4B,KACvC,GAAM,CAAEC,KAAAA,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAAS,CACxBC,MAAOC,EAAAA,EAA2BA,GAG9BC,EAAsBC,CAAAA,EAAAA,EAAAA,OAAAA,EAC1B,IACEL,GAAMI,oBAAoBE,KAAK,CAACpB,EAAGqB,IAAMrB,EAAE3B,EAAE,CAACiD,aAAa,CAACD,EAAEhD,EAAE,IAAM,EAAE,CAC1E,CAACyC,EAAK,EAIFS,EAAaJ,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACzB,IAAMK,EAAyC,CAAC,EAShD,OAPAN,EAAoBO,OAAO,CAACC,IACrBF,CAAS,CAACE,EAAOC,MAAM,CAAC,EAC3BH,CAAAA,CAAS,CAACE,EAAOC,MAAM,CAAC,CAAG,EAAE,EAE/BH,CAAS,CAACE,EAAOC,MAAM,CAAC,CAACC,IAAI,CAACF,EAAOG,GAAG,CAC1C,GAEOC,OAAOC,IAAI,CAACP,GAChBJ,IAAI,CAAC,CAACpB,EAAGqB,IAAMrB,EAAEsB,aAAa,CAACD,IAC/BjD,GAAG,CAAC4D,GAAe,EAClBA,WAAAA,EACAD,KAAMP,CAAS,CAACQ,EAAW,CAACZ,IAAI,CAAC,CAACpB,EAAGqB,IAAMrB,EAAEsB,aAAa,CAACD,GAC7D,GACJ,EAAG,CAACH,EAAoB,EAGlBe,EAAcd,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KAC1B,IAAMe,EAAY,IAAIC,IAStB,OAPAjB,EAAoBO,OAAO,CAACC,IACrBQ,EAAUE,GAAG,CAACV,EAAOC,MAAM,GAC9BO,EAAUG,GAAG,CAACX,EAAOC,MAAM,CAAE,EAAE,EAEjCO,EAAUI,GAAG,CAACZ,EAAOC,MAAM,GAAGC,KAAKF,EACrC,GAEOa,MAAMC,IAAI,CAACN,EAAUO,OAAO,IAAIrE,GAAG,CAAC,CAAC,CAAC4D,EAAYU,EAAQ,GAAM,EACrEV,WAAAA,EACAU,QAAAA,CACF,GACF,EAAG,CAACxB,EAAoB,EAExB,MAAO,CACLA,oBAAAA,EACAK,WAAAA,EACAU,YAAAA,CACF,CACF,ECrDaU,EAAc,CACzBC,EACAC,EACAC,KAEA,OAAQF,GACN,IAAK,UACH,MAAO,UAACG,EAAAA,EAAMA,CAAAA,CAACC,QAASH,EAAOC,SAAUA,C,EAC3C,KAAK,SACH,MACE,UAACG,EAAAA,EAAKA,CAAAA,CAACL,KAAK,OAAOM,UAAW,EAAGL,MAAOA,EAAOC,SAAUA,C,EAE7D,KAAK,SACH,MACE,UAAC3F,MAAAA,CAAIgG,MAAO,CAAEC,MAAO,MAAO,E,SAC1B,UAACH,EAAAA,EAAKA,CAAAA,CAACL,KAAK,SAASC,MAAOA,EAAOC,SAAUA,C,IAInD,SACE,OAAO,IACX,CACF,EAEaO,EAAU,CAACrD,EAAQqB,IAC9B,OAAWrB,GAAM,OAAOqB,IACpB,iBAAOrB,EAAuBxB,KAAKC,SAAS,CAACuB,KAAOxB,KAAKC,SAAS,CAAC4C,GAChErB,IAAMqB,GAGFiC,EAAc,GACzB,UAAI,OAAOT,EAA2BrE,KAAKC,SAAS,CAACoE,GAC9CA,EAAMU,QAAQ,GAGVC,EAAsB,CAACX,EAAYD,KAC9C,IAAIrE,EAAW,KACf,OAAQqE,GACN,IAAK,UACHrE,EAAW,CAAC,CAACsE,EACb,KACF,KAAK,SACHtE,EAAWsE,EACX,KACF,KAAK,SACHtE,EAAWkF,OAAOZ,GAClB,KACF,KAAK,QACHtE,EAAWsE,EAAMa,KAAK,CAAC,KACvB,KACF,KAAK,SACHnF,EAAWC,KAAKmF,KAAK,CAACd,EAI1B,CACA,OAAOtE,CACT,E,yBCjDO,IAAMqF,EAAgC,KAC3C,GAAM,CAAEC,QAAAA,CAAO,CAAEC,WAAAA,CAAU,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,EAAY,CAC1CC,SAAUC,EAAAA,EAAkCA,GAExCC,EAAaC,CAAAA,EAAAA,EAAAA,CAAAA,IAEnB,MAAO,CACLN,QAASO,CAAAA,EAAAA,EAAAA,CAAAA,EACP,MAAOC,IACL,GAAI,CACF,MAAMR,EAAQQ,GACd,MAAMH,EAAWjD,EAAAA,EAA2BA,EAC5CqD,EAAAA,EAAMA,CAACC,OAAO,CAAC,CACb1G,MAAO,qBACP2G,QAAS,sDACX,EACF,CAAE,MAAOrE,EAAG,CACVmE,EAAAA,EAAMA,CAACG,KAAK,CAAC,CACX5G,MAAO,iBACP2G,QACE,gEACJ,GACAE,QAAQD,KAAK,CAACtE,EAChB,CACF,EACA,CAAC+D,EAAYL,EAAQ,EAEvBC,WAAAA,CACF,CACF,ECnBaa,EAAa,KACxB,GAAM,CAAEzD,oBAAAA,CAAmB,CAAEK,WAAAA,CAAU,CAAEU,YAAAA,CAAW,CAAE,CACpDpB,IAEI,CAAChC,EAAe+F,EAAiB,CAAG3F,CAAAA,EAAAA,EAAAA,QAAAA,EACxCsC,CAAU,CAAC,EAAE,CAACS,UAAU,EAGpB,CAAE6B,QAAAA,CAAO,CAAE,CAAGD,IAEd,CAACiB,EAAcC,EAAgB,CAAG7F,CAAAA,EAAAA,EAAAA,QAAAA,EACtCiC,EAAoB6D,MAAM,CACxB,CAACC,EAAKtD,KACJsD,CAAG,CAACtD,EAAOrD,EAAE,CAAC,CAAGqD,EAAOmB,KAAK,CACtBmC,GAET,CAAC,IAICC,EAAoB/H,CAAAA,EAAAA,EAAAA,WAAAA,EACxB,CAAC2E,EAAagB,EAAYD,KACxB,IAAMrE,EAAWiF,EAAoBX,EAAOD,GAC5CkC,EAAgBI,GAAe,EAC7B,GAAGA,CAAU,CACb,CAACrD,EAAI,CAAEtD,CACT,GACF,EACA,EAAE,EAGE5B,EAAmCwE,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IACxCD,EACJiE,MAAM,CAACzD,GAAU,CAAC2B,EAAQ3B,EAAOmB,KAAK,CAAEgC,CAAY,CAACnD,EAAOrD,EAAE,CAAC,GAC/DD,GAAG,CAACsD,GAAW,EACdrD,GAAIqD,EAAOrD,EAAE,CACbwD,IAAKH,EAAOG,GAAG,CACfvD,aAAcoD,EAAOmB,KAAK,CAC1BtE,SAAUsG,CAAY,CAACnD,EAAOrD,EAAE,CAAC,CACnC,GACD,CAACwG,EAAc3D,EAAoB,EAEhCkE,EAAalI,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,KAE7B,IAAMmI,EAA+B,CAAC,EAEtC1I,EAAe8E,OAAO,CAACrB,IACjBA,EAAK/B,EAAE,EAAI+B,KAAkBkF,IAAlBlF,EAAK7B,QAAQ,EAC1B8G,CAAAA,CAAO,CAACjF,EAAK/B,EAAE,CAAC,CAAG+B,EAAK7B,QAAQ,CAEpC,GACAsF,EAAQ,CAAEwB,QAAAA,CAAQ,EACpB,EAAG,CAAC1I,EAAgBkH,EAAQ,EAE5B,MACE,UAAC1G,MAAAA,CAAIC,UCvES,U,SDwEZ,WAACD,MAAAA,CAAIC,UC5EY,U,UD6Ef,UAACD,MAAAA,CAAIC,UCvEQ,U,SDwEVmE,EAAWnD,GAAG,CAACuD,GACd,UAACjD,EAAeA,CAEdC,MAAOgD,EAAOI,IAAI,CAClBlE,MAAO8D,EAAOK,UAAU,CACxBnD,cAAeA,EACfC,aAAc8F,C,EAJTjD,EAAOK,UAAU,E,GAQ5B,WAAC7E,MAAAA,CAAIC,UCvFK,U,UDwFR,UAACV,EAAgBA,CACfC,eAAgBA,EAChBC,UAAWwI,C,GAEb,WAACG,EAAAA,EAAUA,CAACC,IAAI,E,UACd,UAACD,EAAAA,EAAUA,CAACE,QAAQ,E,SAClB,UAACtI,MAAAA,CAAIC,UC1FK,U,SD2FP6E,EACEkD,MAAM,CAACO,GAASA,EAAM1D,UAAU,GAAKnD,GACrCT,GAAG,CAACsH,IACH,GAAM,CAAE1D,WAAAA,CAAU,CAAEU,QAAAA,CAAO,CAAE,CAAGgD,EAChC,MACE,WAACvI,MAAAA,CACCkB,GAAI2D,EACJ5E,UCpGK,U,UDuGL,UAACD,MAAAA,CAAIC,UCxGT,U,SDwGoC4E,C,GAC/BU,GAAStE,IAAIsD,IACZ,GAAM,CAAErD,GAAAA,CAAE,CAAEuE,KAAAA,CAAI,CAAE9E,YAAAA,CAAW,CAAE6H,UAAAA,CAAS,CAAE,CAAGjE,EACvCkE,EAAevC,EACnB3B,EAAOmB,KAAK,CACZgC,CAAY,CAACxG,EAAG,EAEZwH,EAAoBvC,EAAY5B,EAAOmB,KAAK,EAC5CiD,EAAqBxC,EACzBuB,CAAY,CAACxG,EAAG,EAElB,OACE,MAACiC,EAAiBA,CAEhBjC,GAAIA,EACJP,YAAaA,EACbyC,gBAAiBoF,EACjBnF,UAAWmC,EACTC,EACAiC,CAAY,CAACxG,EAAG,CAChBwE,GAASoC,EAAkB5G,EAAIwE,EAAOD,I,SAGxC,OAACzF,MAAAA,CAAIgG,MAAO,CAAE4C,QAASH,EAAe,EAAI,CAAE,E,UACzCC,EAAkB,OAAQC,E,IAXxBzH,EAeX,G,EA9BK2D,EAiCX,E,KAGN,UAACuD,EAAAA,EAAUA,CAACS,SAAS,K,UAMjC,EAEaC,EAAY,KACvB,GAAM,CAAEnF,KAAAA,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,EAAS,CACxBC,MAAOkF,EAAAA,EAAoBA,GAEvB,CAAEC,UAAAA,CAAS,CAAE,CAAGnJ,CAAAA,EAAAA,EAAAA,CAAAA,IAChBoJ,EAAetF,GAAMuF,aAAaC,gBACxC,GAAsBF,EAAaG,QAAQ,CAACC,EAAAA,EAAWA,CAACC,KAAK,EAKtD,UAAC9B,EAAAA,CAAAA,IAJNwB,IACO,KAIX,C","sources":["webpack://@affine/web/../core/src/components/admin-panel/index.css.ts","webpack://@affine/web/../core/src/components/admin-panel/admin-panel-header.tsx","webpack://@affine/web/../core/src/components/admin-panel/collapsible-item.tsx","webpack://@affine/web/../core/src/components/admin-panel/runtime-setting-row.tsx","webpack://@affine/web/../core/src/components/admin-panel/use-get-server-runtime-config.ts","webpack://@affine/web/../core/src/components/admin-panel/utils.tsx","webpack://@affine/web/../core/src/components/admin-panel/use-update-server-runtime-config.ts","webpack://@affine/web/../core/src/pages/admin-panel.tsx","webpack://@affine/web/../core/src/pages/admin-panel.css.ts"],"sourcesContent":["import \"../core/src/components/admin-panel/index.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"../core/src/components/admin-panel/index.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAACrVWTY/bIBC976/gUil7ILKT3XSXVf9Hq6oHYsY2jQ0USOyk2v9eGQix8+VkV70k8sA8Ho83DNOdTf88Nwn6+4BQw5ktCUqT5MvbA0KMG1XRLUF5BW0X+L02ludbnElhQViCjKIZ4CXYBkB0M2jFC4G5hdoQlIGwoLuwooxxURCUzlSL0oVycEupGWi8lNbKmqBUtcjIijO0oXqCMc1zLgCHWZmspH7s0gqqCHrxEEoabrkUBBnLs9XWwdJsVWi5FswnkSO8w7DSvKZ628PeYS4YtATN3h7eH6ZenNSJk0thseE7IGg+86tna206fCW532lMmR2nDCi4eInnbkn30QAvSkvQUlbsrPQXhO1r0ZTcAnZHQpDSgBtNVTdgobXYAfRTTw5zPxQ3Mb/JFN0/ZlxD5g8ik9W6FnGkI0GQpxKRnxzyCdTRUifyXpShkZrhpQa6Isj9YVpVccBT8PEu8DZ2NEtq4PLZODmtpsLkUtcEZVRxSyu+A0f6jOVcxqnZgrM1ZXxtCHoKlt7XSviuqS64iFXiogchSSk3oJ2cI753E+PqPYQNN9wCcxg3sz/k/2TUUkwzyzfwzeo1/DpicxuPZ5fVk1VLSy1M8GvCoHB6ucFQ7nEiSqYz08fxfKQC0WNziutQfbyiFn5M5qrtfX+f4C7QA17c5NnL1XCvR+PCX8fvElM/XiiYcY+hNNwfdzj3WgkceH/amy/nLqA7aA62mQwK5+WTtn91eTVtcaD3ukhCvXKBy3BlpEkInthm0MRid1x0PM+0xmT6fFNzjPToebNedqfjE9wRdrTo9I6Iyw8hhh1eNW9rHu8810DwyRti0BMcHxD9+snG6+f6hX9/dzm6sxcD67FxPmOSGMikYLd0k75Bjh9Cxw+r2x9O59aPLu6eeHsn9ZRbASgvXFQC/ocSET2/3odGtvPB2ulX/2J4Bpfu4PgmDj+zQd+38lBG3S2ZV7IhqOSM+Rf3HWUz3kKidsX1a7HkRVl1m8S51BBU1MCObHQ9dT/fhRlkUlOvbOUml1qui7KnhPaqzgbFVH6AaKEBxF1U9xnv/wBpQptfLw0AAA==\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var LeftItem = 'zt1q5wa';\nexport var RightItem = 'zt1q5wb';\nexport var arrowIcon = 'zt1q5w5';\nexport var changedValues = 'zt1q5wf';\nexport var collapsibleContainer = 'zt1q5w6';\nexport var expiredValue = 'zt1q5wg';\nexport var header = 'zt1q5w0';\nexport var logo = 'zt1q5w1';\nexport var navText = 'zt1q5w8';\nexport var newValue = 'zt1q5wh';\nexport var outLine = 'zt1q5w3';\nexport var outLineContent = 'zt1q5w7';\nexport var outLineHeader = 'zt1q5w4';\nexport var settingItem = 'zt1q5w9';\nexport var settingItemDescription = 'zt1q5we';\nexport var settingItemId = 'zt1q5wd';\nexport var settingItemTitle = 'zt1q5wc';\nexport var title = 'zt1q5w2';","import { Button, useConfirmModal } from '@affine/component';\nimport { useNavigateHelper } from '@affine/core/hooks/use-navigate-helper';\nimport { ArrowRightBigIcon, Logo1Icon } from '@blocksuite/icons/rc';\nimport { useCallback } from 'react';\n\nimport * as styles from './index.css';\n\nexport type ModifiedValues = {\n  id: string;\n  expiredValue: any;\n  newValue: any;\n};\n\nexport const AdminPanelHeader = ({\n  modifiedValues,\n  onConfirm,\n}: {\n  modifiedValues: ModifiedValues[];\n  onConfirm: () => void;\n}) => {\n  const { openConfirmModal } = useConfirmModal();\n  const { jumpToIndex } = useNavigateHelper();\n\n  const handleJumpToIndex = useCallback(() => jumpToIndex(), [jumpToIndex]);\n\n  return (\n    <div className={styles.header}>\n      <Logo1Icon className={styles.logo} onClick={handleJumpToIndex} />\n      <div className={styles.title}>\n        <span>After editing, please click the Save button on the right.</span>\n        <ArrowRightBigIcon />\n      </div>\n      <div>\n        <Button\n          variant=\"primary\"\n          disabled={modifiedValues.length === 0}\n          onClick={() => {\n            openConfirmModal({\n              title: 'Save Runtime Configurations ?',\n              description:\n                'Are you sure you want to save the following changes?',\n              confirmText: 'Save',\n              confirmButtonOptions: {\n                variant: 'primary',\n              },\n              onConfirm: onConfirm,\n              children:\n                modifiedValues.length > 0 ? (\n                  <pre className={styles.changedValues}>\n                    <p>{'{'}</p>\n                    {modifiedValues.map(({ id, expiredValue, newValue }) => (\n                      <p key={id}>\n                        {'  '} {id}:{' '}\n                        <span className={styles.expiredValue}>\n                          {JSON.stringify(expiredValue)}\n                        </span>\n                        <span className={styles.newValue}>\n                          {JSON.stringify(newValue)}\n                        </span>\n                        ,\n                      </p>\n                    ))}\n                    <p>{'}'}</p>\n                  </pre>\n                ) : (\n                  'There is no change.'\n                ),\n            });\n          }}\n        >\n          Save\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { ArrowDownSmallIcon } from '@blocksuite/icons/rc';\nimport * as Collapsible from '@radix-ui/react-collapsible';\nimport { useCallback, useState } from 'react';\n\nimport * as styles from './index.css';\n\nexport const CollapsibleItem = ({\n  items,\n  initialOpen = false,\n  title,\n  currentModule,\n  changeModule,\n}: {\n  title: string;\n  items: string[];\n  initialOpen?: boolean;\n  currentModule?: string;\n  changeModule?: (module: string) => void;\n}) => {\n  const [open, setOpen] = useState(initialOpen);\n\n  const handleClick = useCallback(\n    (id: string, event?: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n      event?.preventDefault();\n      const targetElement = document.getElementById(id);\n      if (targetElement) {\n        targetElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n        });\n      }\n      changeModule?.(title);\n    },\n    [changeModule, title]\n  );\n\n  return (\n    <Collapsible.Root\n      className={styles.outLine}\n      open={open}\n      onOpenChange={setOpen}\n    >\n      <div\n        className={styles.outLineHeader}\n        data-active={title === currentModule}\n      >\n        <Collapsible.Trigger className={styles.arrowIcon} data-open={open}>\n          <ArrowDownSmallIcon />\n        </Collapsible.Trigger>\n        <a\n          className={styles.navText}\n          href={`#${title}`}\n          onClick={e => handleClick(title, e)}\n        >\n          {title}\n        </a>\n      </div>\n\n      <div className={styles.collapsibleContainer}>\n        {items.map((item, index) => (\n          <Collapsible.Content\n            className={styles.outLineContent}\n            key={index}\n            onClick={() => handleClick(item)}\n          >\n            <a className={styles.navText} href={`#${item}`}>\n              {item}\n            </a>\n          </Collapsible.Content>\n        ))}\n      </div>\n    </Collapsible.Root>\n  );\n};\n","import { type ReactNode } from 'react';\n\nimport * as styles from './index.css';\n\nexport const RuntimeSettingRow = ({\n  id,\n  description,\n  lastUpdatedTime,\n  operation,\n  children,\n}: {\n  id: string;\n  description: string;\n  lastUpdatedTime: string;\n  operation: ReactNode;\n  children: ReactNode;\n}) => {\n  const formatTime = new Date(lastUpdatedTime).toLocaleString();\n  return (\n    <div id={id} className={styles.settingItem}>\n      <div className={styles.LeftItem}>\n        <div className={styles.settingItemTitle}>{description}</div>\n        <div>\n          <code className={styles.settingItemId}>{id}</code>\n        </div>\n        <div className={styles.settingItemDescription}>\n          last updated at: {formatTime}\n        </div>\n      </div>\n      <div className={styles.RightItem}>\n        {operation}\n        {children}\n      </div>\n    </div>\n  );\n};\n","import { useQuery } from '@affine/core/hooks/use-query';\nimport { getServerRuntimeConfigQuery } from '@affine/graphql';\nimport { useMemo } from 'react';\n\nexport const useGetServerRuntimeConfig = () => {\n  const { data } = useQuery({\n    query: getServerRuntimeConfigQuery,\n  });\n\n  const serverRuntimeConfig = useMemo(\n    () =>\n      data?.serverRuntimeConfig.sort((a, b) => a.id.localeCompare(b.id)) ?? [],\n    [data]\n  );\n\n  // collect all the modules and config keys in each module\n  const moduleList = useMemo(() => {\n    const moduleMap: { [key: string]: string[] } = {};\n\n    serverRuntimeConfig.forEach(config => {\n      if (!moduleMap[config.module]) {\n        moduleMap[config.module] = [];\n      }\n      moduleMap[config.module].push(config.key);\n    });\n\n    return Object.keys(moduleMap)\n      .sort((a, b) => a.localeCompare(b))\n      .map(moduleName => ({\n        moduleName,\n        keys: moduleMap[moduleName].sort((a, b) => a.localeCompare(b)),\n      }));\n  }, [serverRuntimeConfig]);\n\n  // group config by module name\n  const configGroup = useMemo(() => {\n    const configMap = new Map<string, typeof serverRuntimeConfig>();\n\n    serverRuntimeConfig.forEach(config => {\n      if (!configMap.has(config.module)) {\n        configMap.set(config.module, []);\n      }\n      configMap.get(config.module)?.push(config);\n    });\n\n    return Array.from(configMap.entries()).map(([moduleName, configs]) => ({\n      moduleName,\n      configs,\n    }));\n  }, [serverRuntimeConfig]);\n\n  return {\n    serverRuntimeConfig,\n    moduleList,\n    configGroup,\n  };\n};\n","import { Input, Switch } from '@affine/component';\nimport type { RuntimeConfigType } from '@affine/graphql';\n\nexport const renderInput = (\n  type: RuntimeConfigType,\n  value: any,\n  onChange: (value?: any) => void\n) => {\n  switch (type) {\n    case 'Boolean':\n      return <Switch checked={value} onChange={onChange} />;\n    case 'String':\n      return (\n        <Input type=\"text\" minLength={1} value={value} onChange={onChange} />\n      );\n    case 'Number':\n      return (\n        <div style={{ width: '100%' }}>\n          <Input type=\"number\" value={value} onChange={onChange} />\n        </div>\n      );\n    // TODO(@JimmFly): add more types\n    default:\n      return null;\n  }\n};\n\nexport const isEqual = (a: any, b: any) => {\n  if (typeof a !== typeof b) return false;\n  if (typeof a === 'object') return JSON.stringify(a) === JSON.stringify(b);\n  return a === b;\n};\n\nexport const formatValue = (value: any) => {\n  if (typeof value === 'object') return JSON.stringify(value);\n  return value.toString();\n};\n\nexport const formatValueForInput = (value: any, type: RuntimeConfigType) => {\n  let newValue = null;\n  switch (type) {\n    case 'Boolean':\n      newValue = !!value;\n      break;\n    case 'String':\n      newValue = value;\n      break;\n    case 'Number':\n      newValue = Number(value);\n      break;\n    case 'Array':\n      newValue = value.split(',');\n      break;\n    case 'Object':\n      newValue = JSON.parse(value);\n      break;\n    default:\n      break;\n  }\n  return newValue;\n};\n","import { notify } from '@affine/component';\nimport { useAsyncCallback } from '@affine/core/hooks/affine-async-hooks';\nimport {\n  useMutateQueryResource,\n  useMutation,\n} from '@affine/core/hooks/use-mutation';\nimport {\n  getServerRuntimeConfigQuery,\n  updateServerRuntimeConfigsMutation,\n} from '@affine/graphql';\n\nexport const useUpdateServerRuntimeConfigs = () => {\n  const { trigger, isMutating } = useMutation({\n    mutation: updateServerRuntimeConfigsMutation,\n  });\n  const revalidate = useMutateQueryResource();\n\n  return {\n    trigger: useAsyncCallback(\n      async (values: any) => {\n        try {\n          await trigger(values);\n          await revalidate(getServerRuntimeConfigQuery);\n          notify.success({\n            title: 'Saved successfully',\n            message: 'Runtime configurations have been saved successfully.',\n          });\n        } catch (e) {\n          notify.error({\n            title: 'Failed to save',\n            message:\n              'Failed to save runtime configurations, please try again later.',\n          });\n          console.error(e);\n        }\n      },\n      [revalidate, trigger]\n    ),\n    isMutating,\n  };\n};\n","import { Scrollable } from '@affine/component';\nimport type { RuntimeConfigType } from '@affine/graphql';\nimport { FeatureType, getUserFeaturesQuery } from '@affine/graphql';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  AdminPanelHeader,\n  CollapsibleItem,\n  formatValue,\n  formatValueForInput,\n  isEqual,\n  type ModifiedValues,\n  renderInput,\n  RuntimeSettingRow,\n  useGetServerRuntimeConfig,\n} from '../components/admin-panel';\nimport { useUpdateServerRuntimeConfigs } from '../components/admin-panel/use-update-server-runtime-config';\nimport { useNavigateHelper } from '../hooks/use-navigate-helper';\nimport { useQuery } from '../hooks/use-query';\nimport * as styles from './admin-panel.css';\n\nexport const AdminPanel = () => {\n  const { serverRuntimeConfig, moduleList, configGroup } =\n    useGetServerRuntimeConfig();\n\n  const [currentModule, setCurrentModule] = useState<string>(\n    moduleList[0].moduleName\n  );\n\n  const { trigger } = useUpdateServerRuntimeConfigs();\n\n  const [configValues, setConfigValues] = useState(\n    serverRuntimeConfig.reduce(\n      (acc, config) => {\n        acc[config.id] = config.value;\n        return acc;\n      },\n      {} as Record<string, any>\n    )\n  );\n\n  const handleInputChange = useCallback(\n    (key: string, value: any, type: RuntimeConfigType) => {\n      const newValue = formatValueForInput(value, type);\n      setConfigValues(prevValues => ({\n        ...prevValues,\n        [key]: newValue,\n      }));\n    },\n    []\n  );\n\n  const modifiedValues: ModifiedValues[] = useMemo(() => {\n    return serverRuntimeConfig\n      .filter(config => !isEqual(config.value, configValues[config.id]))\n      .map(config => ({\n        id: config.id,\n        key: config.key,\n        expiredValue: config.value,\n        newValue: configValues[config.id],\n      }));\n  }, [configValues, serverRuntimeConfig]);\n\n  const handleSave = useCallback(() => {\n    // post value example: { \"key1\": \"newValue1\",\"key2\": \"newValue2\"}\n    const updates: Record<string, any> = {};\n\n    modifiedValues.forEach(item => {\n      if (item.id && item.newValue !== undefined) {\n        updates[item.id] = item.newValue;\n      }\n    });\n    trigger({ updates });\n  }, [modifiedValues, trigger]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.container}>\n        <div className={styles.sideBar}>\n          {moduleList.map(module => (\n            <CollapsibleItem\n              key={module.moduleName}\n              items={module.keys}\n              title={module.moduleName}\n              currentModule={currentModule}\n              changeModule={setCurrentModule}\n            />\n          ))}\n        </div>\n        <div className={styles.main}>\n          <AdminPanelHeader\n            modifiedValues={modifiedValues}\n            onConfirm={handleSave}\n          />\n          <Scrollable.Root>\n            <Scrollable.Viewport>\n              <div className={styles.scrollArea}>\n                {configGroup\n                  .filter(group => group.moduleName === currentModule)\n                  .map(group => {\n                    const { moduleName, configs } = group;\n                    return (\n                      <div\n                        id={moduleName}\n                        className={styles.moduleContainer}\n                        key={moduleName}\n                      >\n                        <div className={styles.module}>{moduleName}</div>\n                        {configs?.map(config => {\n                          const { id, type, description, updatedAt } = config;\n                          const isValueEqual = isEqual(\n                            config.value,\n                            configValues[id]\n                          );\n                          const formatServerValue = formatValue(config.value);\n                          const formatCurrentValue = formatValue(\n                            configValues[id]\n                          );\n                          return (\n                            <RuntimeSettingRow\n                              key={id}\n                              id={id}\n                              description={description}\n                              lastUpdatedTime={updatedAt}\n                              operation={renderInput(\n                                type,\n                                configValues[id],\n                                value => handleInputChange(id, value, type)\n                              )}\n                            >\n                              <div style={{ opacity: isValueEqual ? 0 : 1 }}>\n                                {formatServerValue} =&gt; {formatCurrentValue}\n                              </div>\n                            </RuntimeSettingRow>\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n              </div>\n            </Scrollable.Viewport>\n            <Scrollable.Scrollbar />\n          </Scrollable.Root>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const Component = () => {\n  const { data } = useQuery({\n    query: getUserFeaturesQuery,\n  });\n  const { jumpTo404 } = useNavigateHelper();\n  const userFeatures = data?.currentUser?.features;\n  if (!userFeatures || !userFeatures.includes(FeatureType.Admin)) {\n    jumpTo404();\n    return null;\n  }\n\n  return <AdminPanel />;\n};\n","import \"../core/src/pages/admin-panel.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"../core/src/pages/admin-panel.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LndpZjl5dTAgewogIGhlaWdodDogMTAwdmg7CiAgd2lkdGg6IDEwMHZ3OwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBmb250LXNpemU6IHZhcigtLWFmZmluZS1mb250LWJhc2UpOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQoud2lmOXl1MSB7CiAgZGlzcGxheTogZmxleDsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7Cn0KLndpZjl5dTIgewogIHdpZHRoOiAzMDBweDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgdmFyKC0tYWZmaW5lLWJvcmRlci1jb2xvcik7CiAgcGFkZGluZzogMTJweCA4cHg7CiAgaGVpZ2h0OiAxMDAlOwogIGJhY2tncm91bmQ6IHZhcigtLWFmZmluZS1iYWNrZ3JvdW5kLXByaW1hcnktY29sb3IpOwogIHotaW5kZXg6IDM7Cn0KLndpZjl5dTMgewogIHBhZGRpbmc6IDI0cHggMCAxNjBweDsKICBiYWNrZ3JvdW5kOiB2YXIoLS1hZmZpbmUtYmFja2dyb3VuZC1wcmltYXJ5LWNvbG9yKTsKfQoud2lmOXl1NCB7CiAgZGlzcGxheTogZmxleDsKICB3aWR0aDogMTAwJTsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIG92ZXJmbG93OiBhdXRvOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KLndpZjl5dTUgewogIHdpZHRoOiAxMDAlOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBwYWRkaW5nOiAxNnB4OwogIG1heC13aWR0aDogOTYwcHg7CiAgbWFyZ2luOiBhdXRvOwogIGdhcDogMTZweDsKfQoud2lmOXl1NiB7CiAgZm9udC1zaXplOiB2YXIoLS1hZmZpbmUtZm9udC1oLTUpOwogIGZvbnQtd2VpZ2h0OiBib2xkOwogIG1hcmdpbi1ib3R0b206IDhweDsKICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTsKICBwYWRkaW5nOiAxNnB4IDA7CiAgYm9yZGVyLWJvdHRvbTogMC41cHggc29saWQgdmFyKC0tYWZmaW5lLWJvcmRlci1jb2xvcik7Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var container = 'wif9yu1';\nexport var main = 'wif9yu4';\nexport var module = 'wif9yu6';\nexport var moduleContainer = 'wif9yu5';\nexport var root = 'wif9yu0';\nexport var scrollArea = 'wif9yu3';\nexport var sideBar = 'wif9yu2';"],"names":["navText","AdminPanelHeader","modifiedValues","onConfirm","openConfirmModal","useConfirmModal","jumpToIndex","useNavigateHelper","handleJumpToIndex","useCallback","div","className","Logo1Icon","onClick","span","ArrowRightBigIcon","Button","variant","disabled","length","title","description","confirmText","confirmButtonOptions","children","pre","p","map","id","expiredValue","newValue","JSON","stringify","CollapsibleItem","items","initialOpen","currentModule","changeModule","open","setOpen","useState","handleClick","event","preventDefault","targetElement","document","getElementById","scrollIntoView","behavior","block","Collapsible","onOpenChange","data-active","data-open","ArrowDownSmallIcon","a","styles","href","e","item","index","RuntimeSettingRow","lastUpdatedTime","operation","formatTime","Date","toLocaleString","code","useGetServerRuntimeConfig","data","useQuery","query","getServerRuntimeConfigQuery","serverRuntimeConfig","useMemo","sort","b","localeCompare","moduleList","moduleMap","forEach","config","module","push","key","Object","keys","moduleName","configGroup","configMap","Map","has","set","get","Array","from","entries","configs","renderInput","type","value","onChange","Switch","checked","Input","minLength","style","width","isEqual","formatValue","toString","formatValueForInput","Number","split","parse","useUpdateServerRuntimeConfigs","trigger","isMutating","useMutation","mutation","updateServerRuntimeConfigsMutation","revalidate","useMutateQueryResource","useAsyncCallback","values","notify","success","message","error","console","AdminPanel","setCurrentModule","configValues","setConfigValues","reduce","acc","handleInputChange","prevValues","filter","handleSave","updates","undefined","Scrollable","Root","Viewport","group","updatedAt","isValueEqual","formatServerValue","formatCurrentValue","opacity","Scrollbar","Component","getUserFeaturesQuery","jumpTo404","userFeatures","currentUser","features","includes","FeatureType","Admin"],"sourceRoot":""}